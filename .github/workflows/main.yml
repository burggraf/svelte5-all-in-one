name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm ci

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Setup Tauri directory
        run: |
          mkdir -p src-tauri

          if [ ! -f "src-tauri/Cargo.toml" ]; then
            cat << 'EOF' > src-tauri/Cargo.toml
          [package]
          name = "sv1"
          version = "0.1.0"
          description = "A Tauri App"
          authors = ["you"]
          license = ""
          repository = ""
          default-run = "sv1"
          edition = "2021"
          rust-version = "1.60"

          [build-dependencies]
          tauri-build = { version = "1.5.0", features = [] }

          [dependencies]
          serde_json = "1.0"
          serde = { version = "1.0", features = ["derive"] }
          tauri = { version = "1.5.2", features = [] }

          [features]
          custom-protocol = [ "tauri/custom-protocol" ]
          EOF
          fi

          if [ ! -f "src-tauri/src/main.rs" ]; then
            mkdir -p src-tauri/src
            cat << 'EOF' > src-tauri/src/main.rs
          #![cfg_attr(
            all(not(debug_assertions), target_os = "windows"),
            windows_subsystem = "windows"
          )]

          fn main() {
            tauri::Builder::default()
              .run(tauri::generate_context!())
              .expect("error while running tauri application");
          }
          EOF
          fi

      - name: Verify Tauri config
        run: |
          if [ ! -f "src-tauri/tauri.conf.json" ]; then
            echo "Error: src-tauri/tauri.conf.json not found"
            exit 1
          fi
          cat src-tauri/tauri.conf.json

      - name: Build the project
        run: npm run build

      - name: Build Tauri App
        run: npm run tauri build -- ${{ matrix.args }}

      - uses: tauri-apps/tauri-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          