name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          #- platform: 'macos-latest'
          #  args: '--target x86_64-apple-darwin'
          #- platform: 'ubuntu-22.04'
          #  args: ''
          #- platform: 'windows-latest'
          #  args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
  
      # For the Windows build job, modify the npm installation steps:
      - name: Install frontend dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          npm cache clean --force
          if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
          if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
          npm install -g @rollup/rollup-win32-x64-msvc
          npm install --no-package-lock

      - name: Install frontend dependencies (non-Windows)
        if: matrix.platform != 'windows-latest'
        run: npm ci --force

      - name: Clean Cargo cache (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Test-Path src-tauri/Cargo.lock) { Remove-Item -Force src-tauri/Cargo.lock }
          if (Test-Path src-tauri/target) { Remove-Item -Recurse -Force src-tauri/target }

      - name: Clean Cargo cache (non-Windows)
        if: runner.os != 'Windows'
        run: |
          rm -f src-tauri/Cargo.lock
          rm -rf src-tauri/target

      # Backup icons
      - name: Backup icons
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path icons_backup
          Copy-Item -Path "src-tauri/icons/*" -Destination icons_backup -Recurse -Force
          Get-ChildItem icons_backup  # Verify the backup

      - name: Backup icons
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p icons_backup
          cp -r src-tauri/icons/* icons_backup/

      # Clean src-tauri directory
      - name: Clean src-tauri
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Test-Path src-tauri) { Remove-Item -Recurse -Force src-tauri }

      - name: Clean src-tauri
        if: runner.os != 'Windows'
        shell: bash
        run: rm -rf src-tauri

      # Restore icons
      - name: Restore icons
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path src-tauri/icons
          Copy-Item -Path "icons_backup/*" -Destination src-tauri/icons -Recurse -Force
          Get-ChildItem src-tauri/icons  # Verify the icons are restored
          if (-not (Test-Path "src-tauri/icons/icon.ico")) {
            Write-Error "icon.ico not found after restore!"
            exit 1
          }

      - name: Restore icons
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p src-tauri/icons
          cp -r icons_backup/* src-tauri/icons/
          ls -la src-tauri/icons/  # Verify the icons are restored

      # Create directory structure
      - name: Create directory structure
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (-not (Test-Path src-tauri/src)) {
              New-Item -ItemType Directory -Force -Path src-tauri/src
          }
          if (-not (Test-Path src-tauri/icons)) {
              New-Item -ItemType Directory -Force -Path src-tauri/icons
          }

      - name: Create directory structure
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p src-tauri/src src-tauri/icons

      # Add this step after checkout and before creating files
      - name: Get version from package.json
        id: package-version
        shell: bash
        run: |
          version=$(node -p "require('./package.json').version")
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "Version from package.json: $version"

      - name: Get PACKAGE_NAME from package.json
        id: package-name
        shell: bash
        run: |
          package_name=$(node -p "require('./package.json').name")
          echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
          echo "Name from package.json: $package_name"

      - name: Get PACKAGE_IDENTIFIER from package.json
        id: package-identifier
        shell: bash
        run: |
          package_identifier=$(node -p "require('./package.json').identifier")
          echo "PACKAGE_IDENTIFIER=$package_identifier" >> $GITHUB_ENV
          echo "Indentifier from package.json: $package_identifier"

      # Create Cargo.toml
      - name: Create Cargo.toml
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $content = @'
          [package]
          name = "${{ env.PACKAGE_NAME }}"
          version = "${{ env.VERSION }}"
          description = "A Tauri App"
          authors = ["you"]
          license = ""
          repository = ""
          default-run = "${{ env.PACKAGE_NAME }}"
          edition = "2021"
          rust-version = "1.60"
          build = "build.rs"

          [build-dependencies]
          tauri-build = { version = "2.0.0-rc.13", features = [] }

          [dependencies]
          serde_json = "1.0"
          serde = { version = "1.0", features = ["derive"] }
          tauri = { version = "2.0.0-rc.13" }

          [features]
          custom-protocol = [ "tauri/custom-protocol" ]
          '@
          Set-Content -Path "src-tauri/Cargo.toml" -Value $content

      - name: Create Cargo.toml
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cat > src-tauri/Cargo.toml << 'EOF'
          [package]
          name = "${{ env.PACKAGE_NAME }}"
          version = "${{ env.VERSION }}"
          description = "A Tauri App"
          authors = ["you"]
          license = ""
          repository = ""
          default-run = "${{ env.PACKAGE_NAME }}"
          edition = "2021"
          rust-version = "1.60"
          build = "build.rs"

          [build-dependencies]
          tauri-build = { version = "2.0.0-rc.13", features = [] }

          [dependencies]
          serde_json = "1.0"
          serde = { version = "1.0", features = ["derive"] }
          tauri = { version = "2.0.0-rc.13" }

          [features]
          custom-protocol = [ "tauri/custom-protocol" ]
          EOF

      # Create build.rs
      - name: Create build.rs
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $content = @'
          fn main() {
            tauri_build::build()
          }
          '@
          Set-Content -Path "src-tauri/build.rs" -Value $content

      - name: Create build.rs
        if: runner.os != 'Windows'
        run: |
          cat > src-tauri/build.rs << 'EOF'
          fn main() {
            tauri_build::build()
          }
          EOF

      # Create main.rs
      - name: Create main.rs
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $content = @'
          #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

          fn main() {
            tauri::Builder::default()
              .run(tauri::generate_context!())
              .expect("error while running tauri application");
          }
          '@
          New-Item -ItemType Directory -Force -Path src-tauri/src
          Set-Content -Path "src-tauri/src/main.rs" -Value $content

      - name: Create main.rs
        if: runner.os != 'Windows'
        run: |
          cat > src-tauri/src/main.rs << 'EOF'
          #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

          fn main() {
            tauri::Builder::default()
              .run(tauri::generate_context!())
              .expect("error while running tauri application");
          }
          EOF

      # Verify the icon
      - name: Verify icon
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Get-ChildItem -Path src-tauri/icons/32x32.png -Force | Select-Object FullName, Length, LastWriteTime

      - name: Verify icon
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ls -la src-tauri/icons/32x32.png
          file src-tauri/icons/32x32.png

      # Create tauri.conf.json (Windows)
      - name: Create tauri.conf.json (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $content = @'
          {
            "$schema": "https://raw.githubusercontent.com/tauri-apps/tauri/dev/tooling/cli/schema.json",
            "identifier": "${{ env.PACKAGE_IDENTIFIER }}",
            "productName": "${{ env.PACKAGE_NAME }}",
            "version": "${{ env.VERSION }}",
            "build": {
              "beforeBuildCommand": "npm run build",
              "beforeDevCommand": "npm run dev",
              "frontendDist": "../build"
            },
            "app": {
              "windows": [
                {
                  "fullscreen": false,
                  "height": 600,
                  "resizable": true,
                  "title": "${{ env.PACKAGE_NAME }}",
                  "width": 800
                }
              ],
              "security": {
                "csp": null
              }
            },
            "bundle": {
              "active": true,
              "icon": [
                "icons/32x32.png"
              ],
              "category": "DeveloperTool",
              "copyright": "",
              "macOS": {
                "entitlements": "entitlements.plist",
                "exceptionDomain": "",
                "frameworks": [],
                "providerShortName": null,
                "signingIdentity": null
              }
            }
          }
          '@
          Set-Content -Path "src-tauri/tauri.conf.json" -Value $content

      - name: Create tauri.conf.json (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cat > src-tauri/tauri.conf.json << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/tauri-apps/tauri/dev/tooling/cli/schema.json",
            "identifier": "${{ env.PACKAGE_IDENTIFIER }}",
            "productName": "${{ env.PACKAGE_NAME }}",
            "version": "${{ env.VERSION }}",
            "build": {
              "beforeBuildCommand": "npm run build",
              "beforeDevCommand": "npm run dev",
              "frontendDist": "../build"
            },
            "app": {
              "windows": [
                {
                  "fullscreen": false,
                  "height": 600,
                  "resizable": true,
                  "title": "${{ env.PACKAGE_NAME }}",
                  "width": 800
                }
              ],
              "security": {
                "csp": null
              }
            },
            "bundle": {
              "active": true,
              "icon": [
                "icons/32x32.png"
              ],
              "category": "DeveloperTool",
              "copyright": "",
              "macOS": {
                "entitlements": "entitlements.plist",
                "exceptionDomain": "",
                "frameworks": [],
                "providerShortName": null,
                "signingIdentity": null
              }
            }
          }
          EOF

      # Install frontend dependencies and build the app
      - name: Install and build frontend (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          npm ci --force
          npm run build
          Get-ChildItem -Path build -Force | Select-Object Name, Length, LastWriteTime

      - name: Install and build frontend (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          npm ci --force
          npm run build
          ls -la build

      # Verify build output
      - name: Verify build output
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Test-Path build) {
            Get-ChildItem -Path build -Force | Select-Object Name, Length, LastWriteTime
          } else {
            Write-Error "Build directory not found!"
            exit 1
          }

      - name: Verify build output
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ls -la build  # Verify the build output

      # Add these debug steps right before the Tauri build action
      - name: Debug Icon Path (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "Current Directory: $(Get-Location)"
          Write-Host "Checking src-tauri/icons directory:"
          Get-ChildItem -Path "src-tauri/icons" -Force -Recurse
          Write-Host "Checking icon.ico specifically:"
          if (Test-Path "src-tauri/icons/icon.ico") {
            $icon = Get-Item "src-tauri/icons/icon.ico"
            Write-Host "Icon exists: $($icon.FullName)"
            Write-Host "Icon size: $($icon.Length) bytes"
            Write-Host "Last modified: $($icon.LastWriteTime)"
          } else {
            Write-Host "icon.ico not found!"
          }
          Write-Host "Checking tauri.conf.json:"
          Get-Content "src-tauri/tauri.conf.json"

      # Modify the tauri.conf.json to use absolute path
      - name: Update tauri.conf.json icon path (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $iconPath = (Resolve-Path "src-tauri/icons/icon.ico").Path
          $content = Get-Content "src-tauri/tauri.conf.json" -Raw
          $json = $content | ConvertFrom-Json
          $json.bundle.icon = @($iconPath)
          $json | ConvertTo-Json -Depth 32 | Set-Content "src-tauri/tauri.conf.json"
          Write-Host "Updated tauri.conf.json with absolute icon path:"
          Get-Content "src-tauri/tauri.conf.json"

      # Then continue with your existing Tauri build action
      - uses: tauri-apps/tauri-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v${{ env.VERSION }}
          releaseName: 'App v${{ env.VERSION }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      # Add macOS specific steps after the Tauri build
      - name: Decode and Import Signing Certificate
        if: matrix.platform == 'macos-latest'
        env:
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain

      # First, sign the .app
      - name: Sign macOS App
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          DEVELOPER_TEAM_ID: ${{ secrets.DEVELOPER_TEAM_ID }}
        run: |
          APP_PATH="./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/sv1-demo.app"
          
          # Sign with hardened runtime
          codesign --force --options runtime \
            --entitlements src-tauri/entitlements.plist \
            --sign "Developer ID Application: Mantis Bible Company (HEGN9W2S9J)" \
            --timestamp \
            --deep \
            "$APP_PATH"

      # Then create and sign the DMG
      - name: Create and Sign DMG
        if: matrix.platform == 'macos-latest'
        run: |
          DMG_PATH="./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/sv1-demo_${{ env.VERSION }}_aarch64.dmg"
          echo "Signing DMG at: $DMG_PATH"
          
          # Sign the DMG
          codesign --force --sign "Developer ID Application: Mantis Bible Company (HEGN9W2S9J)" "$DMG_PATH"
          
          # Verify the signature
          codesign --verify --verbose "$DMG_PATH"

      # Now notarize both the .app and the DMG
      - name: Notarize macOS App and DMG
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          DEVELOPER_TEAM_ID: ${{ secrets.DEVELOPER_TEAM_ID }}
        run: |
          APP_PATH="./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/sv1-demo.app"
          DMG_PATH="./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/sv1-demo_${{ env.VERSION }}_aarch64.dmg"
          
          echo "Notarizing DMG at: $DMG_PATH"
          
          # Submit for notarization with detailed output
          SUBMISSION_ID=$(xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --team-id "$DEVELOPER_TEAM_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --wait \
            --progress)
          
          echo "Submission ID: $SUBMISSION_ID"
          
          # Get detailed info about the submission
          xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --team-id "$DEVELOPER_TEAM_ID" \
            --password "$APPLE_ID_PASSWORD"
          
          # Get the log for the submission
          xcrun notarytool log "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --team-id "$DEVELOPER_TEAM_ID" \
            --password "$APPLE_ID_PASSWORD"
          
          # Check submission status
          STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --team-id "$DEVELOPER_TEAM_ID" \
            --password "$APPLE_ID_PASSWORD" | grep "status" | awk '{print $2}')
          
          if [ "$STATUS" != "Accepted" ]; then
            echo "Notarization failed with status: $STATUS"
            exit 1
          fi
          
          echo "Notarization successful. Stapling..."
          
          # Staple both the .app and the DMG
          xcrun stapler staple "$APP_PATH"
          xcrun stapler staple "$DMG_PATH"
          
          # Verify stapling
          xcrun stapler validate "$APP_PATH"
          xcrun stapler validate "$DMG_PATH"

      # Add these debug steps before signing
      - name: Debug Build Directory
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Checking build directories..."
          echo "Current directory: $(pwd)"
          echo "Listing src-tauri/target/release/bundle contents:"
          ls -R src-tauri/target/release/bundle || echo "Bundle directory not found"
          
          # Find the actual .app file
          echo "Finding .app files:"
          find . -name "*.app" || echo "No .app files found"
          
          # Check if DMG exists
          echo "Finding .dmg files:"
          find . -name "*.dmg" || echo "No .dmg files found"

      # Optional: Upload artifacts
      - name: Upload macOS Artifacts
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-app
          path: |
            ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app
            ./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg

      - name: Verify Code Signing
        if: matrix.platform == 'macos-latest'
        run: |
          APP_PATH="./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/sv1-demo.app"
          DMG_PATH="./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/sv1-demo_${{ env.VERSION }}_aarch64.dmg"
          
          echo "Verifying app signing..."
          codesign -vvv --deep --strict "$APP_PATH"
          
          echo "Checking app entitlements..."
          codesign -d --entitlements :- "$APP_PATH"
          
          echo "Verifying DMG signing..."
          codesign -vvv --strict "$DMG_PATH"

